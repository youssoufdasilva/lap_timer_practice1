{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nvar initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: []\n};\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomePage, _React$Component);\n\n  function HomePage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HomePage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [] // totalTime: 0,\n      // runnersCount: 1,\n      // runnersName: [\"runner1\"],\n      // currentLapTime: [0][0]\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTimer\", function (time) {\n      _this.setState({\n        started: time\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopTimer\", function (time) {\n      // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n      _this.setState({\n        recordedTime: _this.state.recordedTime + time - _this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetTimer\", function () {\n      _this.setState(initialState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addLap\", function (time) {\n      //for multi runner we'll identify which runner's lap we're updating\n\n      /*\n      const lapTotal = state.laps.reduce((prev, cur) => prev + cur, 0);\n        const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n        const newLapTotal = lapTotal + lapTime;\n        return {\n          ...state,\n          lapTotal: newLapTotal,\n          laps: [lapTime, ...state.laps],\n        }\n      */\n      var lapTotal = _this.state.laps.reduce(function (prev, cur) {\n        return prev + cur;\n      }, 0);\n\n      var lapTime = action.time - state.started + state.recordedTime - lapTotal;\n      var newLapTotal = lapTotal + lapTime;\n\n      _this.setState({\n        lapTotal: newLapTotal,\n        laps: [lapTime].concat(_toConsumableArray(_this.state.laps))\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.tick();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      requestAnimationFrame(this.tick.bind(this));\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.started) {\n        var now = convertToCentiSeconds(_Date$now());\n        var totalTime = now - this.state.started + this.state.recordedTime;\n        this.setState({\n          now: now,\n          totalTime: totalTime,\n          currentLapTime: totalTime - this.state.lapTotal\n        });\n      } else {\n        if (this.state.recordedTime !== this.state.totalTime) {\n          this.setState({\n            totalTime: this.state.recordedTime,\n            currentLapTime: this.state.recordedTime - this.state.lapTotal\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, __jsx(\"strike\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Runner#1 \"), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"text\",\n        value: \"Alex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))), __jsx(\"button\", {\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Add Runner\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, !this.state.started ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.startTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Start Timer\") : __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.stopTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.resetTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Reset Timer\") : null, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Total Time\"), __jsx(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), __jsx(Timer, {\n        label: \"Total Time\",\n        time: this.state.totalTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, __jsx(LapRunner, {\n        pos: 1,\n        laps: this.state.laps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return HomePage;\n}(React.Component); // export default HomePage;\n\n\nexport { HomePage as default };","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","initialState","started","recordedTime","lapTotal","laps","HomePage","time","setState","state","reduce","prev","cur","lapTime","action","newLapTotal","tick","requestAnimationFrame","bind","now","totalTime","currentLapTime","textAlign","startTimer","stopTimer","resetTimer","React","Component"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,qBAAT,QAAsC,oBAAtC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,IAAMC,YAAY,GAAG;AACnB;;;AAGAC,EAAAA,OAAO,EAAE,IAJU;;AAMnB;;;AAGAC,EAAAA,YAAY,EAAE,CATK;;AAWnB;;;;;AAKAC,EAAAA,QAAQ,EAAE,CAhBS;;AAkBnB;;;AAGAC,EAAAA,IAAI,EAAE;AArBa,CAArB;;IAwBqBC,Q;;;;;;;;;;;;;;;;;;4DACX;AACNJ,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,YAAY,EAAE,CAFR;AAGNC,MAAAA,QAAQ,EAAE,CAHJ;AAINC,MAAAA,IAAI,EAAE,EAJA,CAMN;AACA;AACA;AACA;;AATM,K;;iEAuCK,UAAAE,IAAI,EAAI;AACnB,YAAKC,QAAL,CAAc;AACZN,QAAAA,OAAO,EAAEK;AADG,OAAd;AAGD,K;;gEAEW,UAAAA,IAAI,EAAI;AAClB;AACA;AACA,YAAKC,QAAL,CAAc;AACZL,QAAAA,YAAY,EAAE,MAAKM,KAAL,CAAWN,YAAX,GAA0BI,IAA1B,GAAiC,MAAKE,KAAL,CAAWP,OAD9C;AAEZA,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,K;;iEAEY,YAAM;AACjB,YAAKM,QAAL,CAAcP,YAAd;AACD,K;;6DAEQ,UAAAM,IAAI,EAAI;AACf;;AAEA;;;;;;;;;;AAWA,UAAMH,QAAQ,GAAG,MAAKK,KAAL,CAAWJ,IAAX,CAAgBK,MAAhB,CAAuB,UAACC,IAAD,EAAOC,GAAP;AAAA,eAAeD,IAAI,GAAGC,GAAtB;AAAA,OAAvB,EAAkD,CAAlD,CAAjB;;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACP,IAAP,GAAcE,KAAK,CAACP,OAApB,GAA8BO,KAAK,CAACN,YAApC,GAAmDC,QAAnE;AACA,UAAMW,WAAW,GAAGX,QAAQ,GAAGS,OAA/B;;AAEA,YAAKL,QAAL,CAAc;AACZJ,QAAAA,QAAQ,EAAEW,WADE;AAEZV,QAAAA,IAAI,GAAGQ,OAAH,4BAAe,MAAKJ,KAAL,CAAWJ,IAA1B;AAFQ,OAAd;AAID,K;;;;;;;wCApEmB;AAClB,WAAKW,IAAL;AACD;;;yCAEoB;AACnBC,MAAAA,qBAAqB,CAAC,KAAKD,IAAL,CAAUE,IAAV,CAAe,IAAf,CAAD,CAArB;AACD;;;2BAEM;AACL,UAAI,KAAKT,KAAL,CAAWP,OAAf,EAAwB;AACtB,YAAMiB,GAAG,GAAGrB,qBAAqB,CAAC,WAAD,CAAjC;AACA,YAAMsB,SAAS,GAAGD,GAAG,GAAG,KAAKV,KAAL,CAAWP,OAAjB,GAA2B,KAAKO,KAAL,CAAWN,YAAxD;AACA,aAAKK,QAAL,CAAc;AACZW,UAAAA,GAAG,EAAHA,GADY;AAEZC,UAAAA,SAAS,EAATA,SAFY;AAGZC,UAAAA,cAAc,EAAED,SAAS,GAAG,KAAKX,KAAL,CAAWL;AAH3B,SAAd;AAKD,OARD,MAQO;AACL,YAAI,KAAKK,KAAL,CAAWN,YAAX,KAA4B,KAAKM,KAAL,CAAWW,SAA3C,EAAsD;AACpD,eAAKZ,QAAL,CAAc;AACZY,YAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWN,YADV;AAEZkB,YAAAA,cAAc,EAAE,KAAKZ,KAAL,CAAWN,YAAX,GAA0B,KAAKM,KAAL,CAAWL;AAFzC,WAAd;AAID;AACF;AACF;;;6BA6CQ;AAAA;;AACP,aACE;AAAK,QAAA,KAAK,EAAE;AAAEkB,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,0DADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CAPF,EAaE;AAAQ,QAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAbF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,OAcS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdT,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,OAgBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBT,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAAC,KAAKb,KAAL,CAAWP,OAAZ,GACC;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACqB,UAAL,CAAgBzB,qBAAqB,CAAC,WAAD,CAArC,CAAN;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,GAOC;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC0B,SAAL,CAAe1B,qBAAqB,CAAC,WAAD,CAApC,CAAN;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARJ,EAeG,KAAKW,KAAL,CAAWN,YAAX,GAA0B,CAA1B,IAA+B,KAAKM,KAAL,CAAWP,OAAX,IAAsB,IAArD,GACC;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACuB,UAAL,CAAgB3B,qBAAqB,CAAC,WAAD,CAArC,CAAN;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,GAMG,IArBN,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvBF,EAwBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBF,EAyBE,MAAC,KAAD;AAAO,QAAA,KAAK,EAAC,YAAb;AAA0B,QAAA,IAAI,EAAE,KAAKW,KAAL,CAAWW,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBF,CAnBF,EAgDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,SAAD;AAAW,QAAA,GAAG,EAAE,CAAhB;AAAmB,QAAA,IAAI,EAAE,KAAKX,KAAL,CAAWJ,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAhDF,CADF;AAsDD;;;;EA1ImCqB,KAAK,CAACC,S,GA6I5C;;;SA7IqBrB,Q","sourcesContent":["// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: []\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: []\n\n    // totalTime: 0,\n    // runnersCount: 1,\n    // runnersName: [\"runner1\"],\n    // currentLapTime: [0][0]\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    this.setState({\n      started: time\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    this.setState(initialState);\n  };\n\n  addLap = time => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    /*\n    const lapTotal = state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      return {\n        ...state,\n        lapTotal: newLapTotal,\n        laps: [lapTime, ...state.laps],\n      }\n    */\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: [lapTime, ...this.state.laps]\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        <div>\n          <span>Runner#1 </span>\n          <span>\n            <input type=\"text\" value=\"Alex\" />\n          </span>\n        </div>\n        <button disabled>Add Runner</button>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n\n          <h1>Total Time</h1>\n          <h3></h3>\n          <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n        </div>\n        {/*  */}\n        {/* Lap Runners */}\n        <div>\n          <LapRunner pos={1} laps={this.state.laps} />\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default HomePage;\n"]},"metadata":{},"sourceType":"module"}