{"ast":null,"code":"var _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [],\n  runnersSelected: false,\n  nextRunnerName: \"\"\n};\nexport default class HomePage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [[]],\n      runnersSelected: false,\n      runners: [\"Alex\"],\n      nextRunnerName: \"\"\n    });\n\n    _defineProperty(this, \"startTimer\", time => {\n      console.log(\"=== startTimer ===\");\n      let allLaps = [];\n      this.state.runners.map(runner => {\n        allLaps[runner] = [];\n      });\n      this.setState({\n        started: time,\n        runnersSelected: true,\n        laps: allLaps\n      });\n    });\n\n    _defineProperty(this, \"stopTimer\", time => {\n      console.log(\"=== stopTimer ===\"); // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n\n      this.setState({\n        recordedTime: this.state.recordedTime + time - this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(this, \"resetTimer\", () => {\n      console.log(\"=== resetTimer ===\");\n      this.setState(initialState);\n    });\n\n    _defineProperty(this, \"addLap\", (position, time) => {\n      console.log(\"=== addLap ===\"); //for multi runner we'll identify which runner's lap we're updating\n\n      const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = time - this.state.started + this.state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      console.log(\"this.state.laps\");\n      console.log(this.state.laps);\n      let allLaps = this.state.laps;\n      let currentRunnerLapList = allLaps[this.state.runners[position]];\n      currentRunnerLapList.push(lapTime);\n      allLaps[this.state.runners[position]] = currentRunnerLapList;\n      this.setState({\n        lapTotal: newLapTotal,\n        laps: allLaps\n      });\n    });\n\n    _defineProperty(this, \"updateNextRunnerName\", evt => {\n      this.setState({\n        nextRunnerName: evt.target.value\n      });\n    });\n\n    _defineProperty(this, \"addRunner\", () => {\n      if (this.state.nextRunnerName == \"\") {\n        alert(\"Name Cannot be blank\");\n      } else {\n        let newRunners = this.state.runners;\n        newRunners.push(this.state.nextRunnerName);\n        this.setState({\n          runners: newRunners,\n          nextRunnerName: \"\"\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeRunner\", pos => {\n      if (this.state.runners.length > 1) {\n        let listOfRunners = this.state.runners;\n        listOfRunners.splice(pos, 1);\n        this.setState({\n          runners: listOfRunners\n        });\n      } else {\n        alert(\"removing last runner is not possible\");\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, __jsx(\"strike\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), this.state.runners.map((runnerName, pos) => {\n      return __jsx(Runner, {\n        key: pos,\n        name: runnerName,\n        position: pos,\n        removeRunner: () => this.removeRunner(pos),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      });\n    }), __jsx(\"input\", {\n      type: \"text\",\n      value: this.state.nextRunnerName,\n      onChange: evt => this.updateNextRunnerName(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: () => this.addRunner(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Add Runner #\", this.state.runners.length + 1), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, !this.state.started ? __jsx(\"button\", {\n      onClick: () => this.startTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Start Timer\") : __jsx(\"button\", {\n      onClick: () => this.stopTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n      onClick: () => this.resetTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Reset Timer\") : null, __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), this.state.runnersSelected == true ? __jsx(\"div\", {\n      style: {\n        display: \"inline-block\",\n        margin: \"0 auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, __jsx(Timer, {\n      label: \"Total Time\",\n      time: this.state.totalTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.state.runners.map((runner, i) => {\n      return __jsx(LapRunner, {\n        key: i,\n        name: runner,\n        pos: i,\n        laps: this.state.laps[runner],\n        addLap: () => this.addLap(i, convertToCentiSeconds(Date.now())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      });\n    }))) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","Runner","initialState","started","recordedTime","lapTotal","laps","runnersSelected","nextRunnerName","HomePage","React","Component","runners","time","console","log","allLaps","state","map","runner","setState","position","reduce","prev","cur","lapTime","newLapTotal","currentRunnerLapList","push","evt","target","value","alert","newRunners","pos","length","listOfRunners","splice","componentDidMount","tick","componentDidUpdate","requestAnimationFrame","bind","now","Date","totalTime","currentLapTime","render","textAlign","runnerName","removeRunner","updateNextRunnerName","addRunner","startTimer","stopTimer","resetTimer","display","margin","i","addLap"],"mappings":"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","sourcesContent":["import { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [],\n  runnersSelected: false,\n  nextRunnerName: \"\"\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [[]],\n    runnersSelected: false,\n\n    runners: [\"Alex\"],\n    nextRunnerName: \"\"\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    console.log(\"=== startTimer ===\");\n    let allLaps = [];\n\n    this.state.runners.map(runner => {\n      allLaps[runner] = [];\n    });\n\n    this.setState({\n      started: time,\n      runnersSelected: true,\n      laps: allLaps\n    });\n  };\n\n  stopTimer = time => {\n    console.log(\"=== stopTimer ===\");\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    console.log(\"=== resetTimer ===\");\n    this.setState(initialState);\n  };\n\n  addLap = (position, time) => {\n    console.log(\"=== addLap ===\");\n    //for multi runner we'll identify which runner's lap we're updating\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    console.log(\"this.state.laps\");\n    console.log(this.state.laps);\n\n    let allLaps = this.state.laps;\n    let currentRunnerLapList = allLaps[this.state.runners[position]];\n    currentRunnerLapList.push(lapTime);\n    allLaps[this.state.runners[position]] = currentRunnerLapList;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: allLaps\n    });\n  };\n\n  updateNextRunnerName = evt => {\n    this.setState({\n      nextRunnerName: evt.target.value\n    });\n  };\n\n  addRunner = () => {\n    if (this.state.nextRunnerName == \"\") {\n      alert(\"Name Cannot be blank\");\n    } else {\n      let newRunners = this.state.runners;\n      newRunners.push(this.state.nextRunnerName);\n      this.setState({\n        runners: newRunners,\n        nextRunnerName: \"\"\n      });\n    }\n  };\n\n  removeRunner = pos => {\n    if (this.state.runners.length > 1) {\n      let listOfRunners = this.state.runners;\n      listOfRunners.splice(pos, 1);\n      this.setState({\n        runners: listOfRunners\n      });\n    } else {\n      alert(\"removing last runner is not possible\");\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        {this.state.runners.map((runnerName, pos) => {\n          return (\n            <Runner\n              key={pos}\n              name={runnerName}\n              position={pos}\n              removeRunner={() => this.removeRunner(pos)}\n            />\n          );\n        })}\n        <input\n          type=\"text\"\n          value={this.state.nextRunnerName}\n          onChange={evt => this.updateNextRunnerName(evt)}\n        />\n        <button onClick={() => this.addRunner()}>\n          Add Runner #{this.state.runners.length + 1}\n        </button>\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n          <br />\n        </div>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Lap Runners */}\n        {this.state.runnersSelected == true ? (\n          <div style={{ display: \"inline-block\", margin: \"0 auto\" }}>\n            <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n            <div style={{ display: \"flex\" }}>\n              {this.state.runners.map((runner, i) => {\n                return (\n                  <LapRunner\n                    key={i}\n                    name={runner}\n                    pos={i}\n                    laps={this.state.laps[runner]}\n                    addLap={() =>\n                      this.addLap(i, convertToCentiSeconds(Date.now()))\n                    }\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}