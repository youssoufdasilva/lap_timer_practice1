{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\nvar initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [],\n  runnersSelected: false,\n  nextRunnerName: \"\"\n};\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomePage, _React$Component);\n\n  function HomePage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HomePage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [[]],\n      runnersSelected: false,\n      runners: [\"Alex\"],\n      nextRunnerName: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTimer\", function (time) {\n      var allLaps = [];\n\n      _this.state.runners.map(function (runner) {\n        allLaps[runner] = [];\n      });\n\n      _this.setState({\n        started: time,\n        runnersSelected: true,\n        laps: allLaps\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopTimer\", function (time) {\n      // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n      _this.setState({\n        recordedTime: _this.state.recordedTime + time - _this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetTimer\", function () {\n      _this.setState(initialState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addLap\", function (position, time) {\n      //for multi runner we'll identify which runner's lap we're updating\n      var lapTotal = _this.state.laps.reduce(function (prev, cur) {\n        return prev + cur;\n      }, 0);\n\n      var lapTime = time - _this.state.started + _this.state.recordedTime - lapTotal;\n      var newLapTotal = lapTotal + lapTime;\n      console.log(\"this.state.laps\");\n      console.log(_this.state.laps);\n      var allLaps = _this.state.laps;\n      var currentRunnerLapList = allLaps[_this.state.runners[position]];\n      currentRunnerLapList.push(lapTime);\n      allLaps[_this.state.runners[position]] = currentRunnerLapList;\n\n      _this.setState({\n        lapTotal: newLapTotal,\n        laps: allLaps\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateNextRunnerName\", function (evt) {\n      _this.setState({\n        nextRunnerName: evt.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addRunner\", function () {\n      if (_this.state.nextRunnerName == \"\") {\n        alert(\"Name Cannot be blank\");\n      } else {\n        var newRunners = _this.state.runners;\n        newRunners.push(_this.state.nextRunnerName);\n\n        _this.setState({\n          runners: newRunners,\n          nextRunnerName: \"\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeRunner\", function (pos) {\n      if (_this.state.runners.length > 1) {\n        var listOfRunners = _this.state.runners;\n        listOfRunners.splice(pos, 1);\n\n        _this.setState({\n          runners: listOfRunners\n        });\n      } else {\n        alert(\"removing last runner is not possible\");\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.tick();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      requestAnimationFrame(this.tick.bind(this));\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.started) {\n        var now = convertToCentiSeconds(_Date$now());\n        var totalTime = now - this.state.started + this.state.recordedTime;\n        this.setState({\n          now: now,\n          totalTime: totalTime,\n          currentLapTime: totalTime - this.state.lapTotal\n        });\n      } else {\n        if (this.state.recordedTime !== this.state.totalTime) {\n          this.setState({\n            totalTime: this.state.recordedTime,\n            currentLapTime: this.state.recordedTime - this.state.lapTotal\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, __jsx(\"strike\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), this.state.runners.map(function (runnerName, pos) {\n        return __jsx(Runner, {\n          name: runnerName,\n          position: pos,\n          removeRunner: function removeRunner() {\n            return _this2.removeRunner(pos);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }), __jsx(\"input\", {\n        type: \"text\",\n        value: this.state.nextRunnerName,\n        onChange: function onChange(evt) {\n          return _this2.updateNextRunnerName(evt);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.addRunner();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Add Runner #\", this.state.runners.length + 1), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, !this.state.started ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.startTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Start Timer\") : __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.stopTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.resetTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Reset Timer\") : null, __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      })), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), this.state.runnersSelected == true ? __jsx(\"div\", {\n        style: {\n          display: \"inline-block\",\n          margin: \"0 auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, __jsx(Timer, {\n        label: \"Total Time\",\n        time: this.state.totalTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, this.state.runners.map(function (runner, i) {\n        return __jsx(LapRunner, {\n          name: runner,\n          pos: i,\n          laps: _this2.state.laps[runner],\n          addLap: function addLap() {\n            return _this2.addLap(i, convertToCentiSeconds(_Date$now()));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        });\n      }))) : null);\n    }\n  }]);\n\n  return HomePage;\n}(React.Component);\n\nexport { HomePage as default };","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","Runner","initialState","started","recordedTime","lapTotal","laps","runnersSelected","nextRunnerName","HomePage","runners","time","allLaps","state","map","runner","setState","position","reduce","prev","cur","lapTime","newLapTotal","console","log","currentRunnerLapList","push","evt","target","value","alert","newRunners","pos","length","listOfRunners","splice","tick","requestAnimationFrame","bind","now","totalTime","currentLapTime","textAlign","runnerName","removeRunner","updateNextRunnerName","addRunner","startTimer","stopTimer","resetTimer","display","margin","i","addLap","React","Component"],"mappings":"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","sourcesContent":["import { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [],\n  runnersSelected: false,\n  nextRunnerName: \"\"\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [[]],\n    runnersSelected: false,\n\n    runners: [\"Alex\"],\n    nextRunnerName: \"\"\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    let allLaps = [];\n\n    this.state.runners.map(runner => {\n      allLaps[runner] = [];\n    });\n\n    this.setState({\n      started: time,\n      runnersSelected: true,\n      laps: allLaps\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    this.setState(initialState);\n  };\n\n  addLap = (position, time) => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    console.log(\"this.state.laps\");\n    console.log(this.state.laps);\n\n    let allLaps = this.state.laps;\n    let currentRunnerLapList = allLaps[this.state.runners[position]];\n    currentRunnerLapList.push(lapTime);\n    allLaps[this.state.runners[position]] = currentRunnerLapList;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: allLaps\n    });\n  };\n\n  updateNextRunnerName = evt => {\n    this.setState({\n      nextRunnerName: evt.target.value\n    });\n  };\n\n  addRunner = () => {\n    if (this.state.nextRunnerName == \"\") {\n      alert(\"Name Cannot be blank\");\n    } else {\n      let newRunners = this.state.runners;\n      newRunners.push(this.state.nextRunnerName);\n      this.setState({\n        runners: newRunners,\n        nextRunnerName: \"\"\n      });\n    }\n  };\n\n  removeRunner = pos => {\n    if (this.state.runners.length > 1) {\n      let listOfRunners = this.state.runners;\n      listOfRunners.splice(pos, 1);\n      this.setState({\n        runners: listOfRunners\n      });\n    } else {\n      alert(\"removing last runner is not possible\");\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        {this.state.runners.map((runnerName, pos) => {\n          return (\n            <Runner\n              name={runnerName}\n              position={pos}\n              removeRunner={() => this.removeRunner(pos)}\n            />\n          );\n        })}\n        <input\n          type=\"text\"\n          value={this.state.nextRunnerName}\n          onChange={evt => this.updateNextRunnerName(evt)}\n        />\n        <button onClick={() => this.addRunner()}>\n          Add Runner #{this.state.runners.length + 1}\n        </button>\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n          <br />\n        </div>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Lap Runners */}\n        {this.state.runnersSelected == true ? (\n          <div style={{ display: \"inline-block\", margin: \"0 auto\" }}>\n            <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n            <div style={{ display: \"flex\" }}>\n              {this.state.runners.map((runner, i) => {\n                return (\n                  <LapRunner\n                    name={runner}\n                    pos={i}\n                    laps={this.state.laps[runner]}\n                    addLap={() =>\n                      this.addLap(i, convertToCentiSeconds(Date.now()))\n                    }\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}