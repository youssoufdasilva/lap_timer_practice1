{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomePage, _React$Component);\n\n  function HomePage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HomePage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      /**\n       * Epoch timestamp of when the timer was started in centiseconds\n       */\n      started: null,\n\n      /**\n       * Total time recorded when stopping the timer in centiseconds\n       */\n      recordedTime: 0,\n\n      /**\n       * Sum of lap times in centiseconds\n       * Setting this value on each lap so it doesn't need to be\n       * calculated when rendering\n       */\n      lapTotal: 0,\n\n      /**\n       * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n       */\n      laps: [] // totalTime: 0,\n      // runnersCount: 1,\n      // runnersName: [\"runner1\"],\n      // currentLapTime: [0][0]\n\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    // setRunners = numOfRunners => {\n    //   this.setState({ runners: numOfRunners });\n    // };\n    // resetRunners = () => {\n    //   this.setState({ runners: null });\n    // };\n    value: function componentDidMount() {\n      this.tick();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      requestAnimationFrame(this.tick.bind(this));\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.started) {\n        var now = convertToCentiSeconds(_Date$now());\n        var totalTime = now - this.state.started + this.state.recordedTime;\n        this.setState({\n          now: now,\n          totalTime: totalTime,\n          currentLapTime: totalTime - this.state.lapTotal\n        });\n      } else {\n        if (this.state.recordedTime !== this.state.totalTime) {\n          this.setState({\n            totalTime: this.state.recordedTime,\n            currentLapTime: this.state.recordedTime - this.state.lapTotal\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, __jsx(\"strike\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Runner#1\"), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        disabled: true,\n        onClick: function onClick() {\n          return _this2.startTime;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Start Timer\"), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Total Time\"), __jsx(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return HomePage;\n}(React.Component); // export default HomePage;\n\n\nexport { HomePage as default };","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","HomePage","started","recordedTime","lapTotal","laps","tick","requestAnimationFrame","bind","state","now","totalTime","setState","currentLapTime","textAlign","startTime","React","Component"],"mappings":";;;;;;;;;;;AAAA;AACA,SAASA,qBAAT,QAAsC,oBAAtC;;IAEqBC,Q;;;;;;;;;;;;;;;;;;4DACX;AACN;;;AAGAC,MAAAA,OAAO,EAAE,IAJH;;AAMN;;;AAGAC,MAAAA,YAAY,EAAE,CATR;;AAWN;;;;;AAKAC,MAAAA,QAAQ,EAAE,CAhBJ;;AAkBN;;;AAGAC,MAAAA,IAAI,EAAE,EArBA,CAuBN;AACA;AACA;AACA;;AA1BM,K;;;;;;;AA6BR;AACA;AACA;AAEA;AACA;AACA;wCAEoB;AAClB,WAAKC,IAAL;AACD;;;yCAEoB;AACnBC,MAAAA,qBAAqB,CAAC,KAAKD,IAAL,CAAUE,IAAV,CAAe,IAAf,CAAD,CAArB;AACD;;;2BAEM;AACL,UAAI,KAAKC,KAAL,CAAWP,OAAf,EAAwB;AACtB,YAAMQ,GAAG,GAAGV,qBAAqB,CAAC,WAAD,CAAjC;AACA,YAAMW,SAAS,GAAGD,GAAG,GAAG,KAAKD,KAAL,CAAWP,OAAjB,GAA2B,KAAKO,KAAL,CAAWN,YAAxD;AACA,aAAKS,QAAL,CAAc;AACZF,UAAAA,GAAG,EAAHA,GADY;AAEZC,UAAAA,SAAS,EAATA,SAFY;AAGZE,UAAAA,cAAc,EAAEF,SAAS,GAAG,KAAKF,KAAL,CAAWL;AAH3B,SAAd;AAKD,OARD,MAQO;AACL,YAAI,KAAKK,KAAL,CAAWN,YAAX,KAA4B,KAAKM,KAAL,CAAWE,SAA3C,EAAsD;AACpD,eAAKC,QAAL,CAAc;AACZD,YAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWN,YADV;AAEZU,YAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWN,YAAX,GAA0B,KAAKM,KAAL,CAAWL;AAFzC,WAAd;AAID;AACF;AACF;;;6BAEQ;AAAA;;AACP,aACE;AAAK,QAAA,KAAK,EAAE;AAAEU,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,0DADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,QAAQ,MAAhB;AAAiB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,SAAX;AAAA,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CATF,CADF;AAmBD;;;;EArFmCC,KAAK,CAACC,S,GAwF5C;;;SAxFqBhB,Q","sourcesContent":["// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\n\nexport default class HomePage extends React.Component {\n  state = {\n    /**\n     * Epoch timestamp of when the timer was started in centiseconds\n     */\n    started: null,\n\n    /**\n     * Total time recorded when stopping the timer in centiseconds\n     */\n    recordedTime: 0,\n\n    /**\n     * Sum of lap times in centiseconds\n     * Setting this value on each lap so it doesn't need to be\n     * calculated when rendering\n     */\n    lapTotal: 0,\n\n    /**\n     * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n     */\n    laps: []\n\n    // totalTime: 0,\n    // runnersCount: 1,\n    // runnersName: [\"runner1\"],\n    // currentLapTime: [0][0]\n  };\n\n  // setRunners = numOfRunners => {\n  //   this.setState({ runners: numOfRunners });\n  // };\n\n  // resetRunners = () => {\n  //   this.setState({ runners: null });\n  // };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n\n        {/* Runners */}\n        <div>Runner#1</div>\n\n        <div>\n          <button disabled onClick={() => this.startTime}>\n            Start Timer\n          </button>\n          <h1>Total Time</h1>\n          <h3></h3>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default HomePage;\n"]},"metadata":{},"sourceType":"module"}