{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\nvar initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: []\n};\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomePage, _React$Component);\n\n  function HomePage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HomePage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [],\n      runners: [\"Alex\"] // currentLapTime: [0][0]\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTimer\", function (time) {\n      _this.setState({\n        started: time\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopTimer\", function (time) {\n      // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n      _this.setState({\n        recordedTime: _this.state.recordedTime + time - _this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetTimer\", function () {\n      _this.setState(initialState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addLap\", function (time) {\n      //for multi runner we'll identify which runner's lap we're updating\n      var lapTotal = _this.state.laps.reduce(function (prev, cur) {\n        return prev + cur;\n      }, 0);\n\n      var lapTime = time - _this.state.started + _this.state.recordedTime - lapTotal;\n      var newLapTotal = lapTotal + lapTime;\n\n      _this.setState({\n        lapTotal: newLapTotal,\n        laps: [lapTime].concat(_toConsumableArray(_this.state.laps))\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addRunner\", function (name) {\n      _this.setState({\n        runners: _this.state.runners.push(name)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeRunner\", function (pos) {\n      if (_this.state.runners.length > 1) {\n        _this.setState({\n          runners: _this.state.runners.splice(pos, 1)\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.tick();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      requestAnimationFrame(this.tick.bind(this));\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.started) {\n        var now = convertToCentiSeconds(_Date$now());\n        var totalTime = now - this.state.started + this.state.recordedTime;\n        this.setState({\n          now: now,\n          totalTime: totalTime,\n          currentLapTime: totalTime - this.state.lapTotal\n        });\n      } else {\n        if (this.state.recordedTime !== this.state.totalTime) {\n          this.setState({\n            totalTime: this.state.recordedTime,\n            currentLapTime: this.state.recordedTime - this.state.lapTotal\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, __jsx(\"strike\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), this.state.runners.map(function (runnerName, pos) {\n        return __jsx(Runner, {\n          name: runnerName,\n          position: pos,\n          addRunner: function addRunner() {\n            return _this2.addRunner;\n          },\n          removeRunner: function removeRunner() {\n            return _this2.removeRunner;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      }), __jsx(\"button\", {\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Add Runner\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, !this.state.started ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.startTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Start Timer\") : __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.stopTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.resetTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Reset Timer\") : null, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Total Time\"), __jsx(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), __jsx(Timer, {\n        label: \"Total Time\",\n        time: this.state.totalTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, __jsx(LapRunner, {\n        pos: 1,\n        laps: this.state.laps,\n        addLap: function addLap() {\n          return _this2.addLap(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), __jsx(LapRunner, {\n        pos: 2,\n        laps: this.state.laps,\n        addLap: function addLap() {\n          return _this2.addLap(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return HomePage;\n}(React.Component);\n\nexport { HomePage as default };","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","Runner","initialState","started","recordedTime","lapTotal","laps","HomePage","runners","time","setState","state","reduce","prev","cur","lapTime","newLapTotal","name","push","pos","length","splice","tick","requestAnimationFrame","bind","now","totalTime","currentLapTime","textAlign","map","runnerName","addRunner","removeRunner","startTimer","stopTimer","resetTimer","display","addLap","React","Component"],"mappings":"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","sourcesContent":["import { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: []\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [],\n\n    runners: [\"Alex\"]\n    // currentLapTime: [0][0]\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    this.setState({\n      started: time\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    this.setState(initialState);\n  };\n\n  addLap = time => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: [lapTime, ...this.state.laps]\n    });\n  };\n\n  addRunner = name => {\n    this.setState({\n      runners: this.state.runners.push(name)\n    });\n  };\n\n  removeRunner = pos => {\n    if (this.state.runners.length > 1) {\n      this.setState({\n        runners: this.state.runners.splice(pos, 1)\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        {this.state.runners.map((runnerName, pos) => {\n          return (\n            <Runner\n              name={runnerName}\n              position={pos}\n              addRunner={() => this.addRunner}\n              removeRunner={() => this.removeRunner}\n            />\n          );\n        })}\n        <button disabled>Add Runner</button>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n\n          <h1>Total Time</h1>\n          <h3></h3>\n          <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n        </div>\n        {/*  */}\n        {/* Lap Runners */}\n        <div style={{ display: \"block\" }}>\n          <LapRunner\n            pos={1}\n            laps={this.state.laps}\n            addLap={() => this.addLap(convertToCentiSeconds(Date.now()))}\n          />\n          <LapRunner\n            pos={2}\n            laps={this.state.laps}\n            addLap={() => this.addLap(convertToCentiSeconds(Date.now()))}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}