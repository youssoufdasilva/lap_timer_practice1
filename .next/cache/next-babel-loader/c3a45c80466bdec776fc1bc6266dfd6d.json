{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\nvar initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: [0],\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [[]],\n  runnersSelected: false,\n  runners: [],\n  nextRunnerName: \"Alex\"\n};\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomePage, _React$Component);\n\n  function HomePage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HomePage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [[]],\n      runnersSelected: false,\n      runners: [],\n      nextRunnerName: \"Alex\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTimer\", function (time) {\n      console.log(\"=== startTimer ===\");\n\n      if (_this.state.runners.length == 0) {\n        console.log(\"default runner added\");\n\n        _this.addRunner();\n      }\n\n      var allLaps = [];\n      var allLapTotals = [];\n\n      _this.state.runners.map(function (runner) {\n        allLaps[runner] = [];\n        allLapTotals[runner] = 0;\n      });\n\n      _this.setState({\n        started: time,\n        runnersSelected: true,\n        laps: allLaps,\n        lapTotal: allLapTotals\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopTimer\", function (time) {\n      console.log(\"=== stopTimer ===\"); // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n\n      _this.setState({\n        recordedTime: _this.state.recordedTime + time - _this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetTimer\", function () {\n      console.log(\"=== resetTimer ===\");\n\n      _this.setState(initialState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addLap\", function (position, time) {\n      console.log(\"=== addLap ===\"); //for multi runner we'll identify which runner's lap we're updating\n\n      var myRunner = _this.state.runners[position];\n\n      var myRunnersLapTotal = _this.state.laps[myRunner].reduce(function (prev, cur) {\n        return prev + cur;\n      }, 0 // 0 is the initial value\n      );\n\n      var lapTime = time - _this.state.started + _this.state.recordedTime - myRunnersLapTotal;\n      var newLapTotalForCurrentRunner = myRunnersLapTotal + lapTime;\n      console.log(\"this.state.laps\");\n      console.log(_this.state.laps);\n      var lapTotal = _this.state.lapTotal;\n      lapTotal[position] = newLapTotalForCurrentRunner;\n      var allLaps = _this.state.laps;\n      var currentRunnerLapList = allLaps[_this.state.runners[position]];\n      currentRunnerLapList.push(lapTime);\n      allLaps[_this.state.runners[position]] = currentRunnerLapList;\n\n      _this.setState({\n        lapTotal: lapTotal,\n        laps: allLaps\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateNextRunnerName\", function (evt) {\n      _this.setState({\n        nextRunnerName: evt.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addRunner\", function () {\n      if (_this.state.nextRunnerName == \"\") {\n        alert(\"Name Cannot be blank\");\n      } else if (_this.state.runners.includes(_this.state.nextRunnerName)) {\n        alert(\"Name '\" + _this.state.nextRunnerName + \"' Already exists\");\n      } else {\n        var newRunners = _this.state.runners;\n        newRunners.push(_this.state.nextRunnerName);\n        console.log(newRunners);\n\n        _this.setState({\n          runners: newRunners,\n          nextRunnerName: \"\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeRunner\", function (pos) {\n      if (_this.state.runners.length > 1) {\n        var listOfRunners = _this.state.runners;\n        listOfRunners.splice(pos, 1);\n\n        _this.setState({\n          runners: listOfRunners\n        });\n      } else {\n        alert(\"removing last runner is not possible\");\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.tick();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      requestAnimationFrame(this.tick.bind(this));\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.started) {\n        var now = convertToCentiSeconds(_Date$now());\n        var totalTime = now - this.state.started + this.state.recordedTime;\n        this.setState({\n          now: now,\n          totalTime: totalTime,\n          currentLapTime: totalTime - this.state.lapTotal\n        });\n      } else {\n        if (this.state.recordedTime !== this.state.totalTime) {\n          this.setState({\n            totalTime: this.state.recordedTime,\n            currentLapTime: this.state.recordedTime - this.state.lapTotal\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, __jsx(\"strike\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), this.state.runners.map(function (runnerName, pos) {\n        if (_this2.state.runners[0] === undefined) {\n          return null;\n        } else {\n          return __jsx(Runner, {\n            key: pos,\n            name: runnerName,\n            position: pos,\n            removeRunner: function removeRunner() {\n              return _this2.removeRunner(pos);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193\n            },\n            __self: this\n          });\n        }\n      }), !this.state.runnersSelected ? __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"text\",\n        value: this.state.nextRunnerName,\n        onChange: function onChange(evt) {\n          return _this2.updateNextRunnerName(evt);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.addRunner();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Add Runner\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })) : null, __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, !this.state.started ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.startTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Start Timer\") : __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.stopTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.resetTimer(convertToCentiSeconds(_Date$now()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Reset Timer\") : null, __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), this.state.runnersSelected == true ? __jsx(\"div\", {\n        style: {\n          display: \"inline-block\",\n          margin: \"0 auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, __jsx(Timer, {\n        label: \"Total Time\",\n        time: this.state.totalTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, this.state.runners.map(function (runner, i) {\n        return __jsx(LapRunner, {\n          key: i,\n          name: runner,\n          pos: i,\n          laps: _this2.state.laps[runner],\n          addLap: function addLap() {\n            return _this2.addLap(i, convertToCentiSeconds(_Date$now()));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        });\n      }))) : null);\n    }\n  }]);\n\n  return HomePage;\n}(React.Component);\n\nexport { HomePage as default };","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","Runner","initialState","started","recordedTime","lapTotal","laps","runnersSelected","runners","nextRunnerName","HomePage","time","console","log","state","length","addRunner","allLaps","allLapTotals","map","runner","setState","position","myRunner","myRunnersLapTotal","reduce","prev","cur","lapTime","newLapTotalForCurrentRunner","currentRunnerLapList","push","evt","target","value","alert","includes","newRunners","pos","listOfRunners","splice","tick","requestAnimationFrame","bind","now","totalTime","currentLapTime","textAlign","runnerName","undefined","removeRunner","updateNextRunnerName","startTimer","stopTimer","resetTimer","display","margin","i","addLap","React","Component"],"mappings":"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","sourcesContent":["import { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: [0],\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [[]],\n  runnersSelected: false,\n  runners: [],\n  nextRunnerName: \"Alex\"\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [[]],\n    runnersSelected: false,\n\n    runners: [],\n    nextRunnerName: \"Alex\"\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    console.log(\"=== startTimer ===\");\n\n    if (this.state.runners.length == 0) {\n      console.log(\"default runner added\");\n      this.addRunner();\n    }\n\n    let allLaps = [];\n    let allLapTotals = [];\n\n    this.state.runners.map(runner => {\n      allLaps[runner] = [];\n      allLapTotals[runner] = 0;\n    });\n\n    this.setState({\n      started: time,\n      runnersSelected: true,\n      laps: allLaps,\n      lapTotal: allLapTotals\n    });\n  };\n\n  stopTimer = time => {\n    console.log(\"=== stopTimer ===\");\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    console.log(\"=== resetTimer ===\");\n    this.setState(initialState);\n  };\n\n  addLap = (position, time) => {\n    console.log(\"=== addLap ===\");\n\n    //for multi runner we'll identify which runner's lap we're updating\n    const myRunner = this.state.runners[position];\n\n    const myRunnersLapTotal = this.state.laps[myRunner].reduce(\n      (prev, cur) => prev + cur,\n      0 // 0 is the initial value\n    );\n\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - myRunnersLapTotal;\n    const newLapTotalForCurrentRunner = myRunnersLapTotal + lapTime;\n\n    console.log(\"this.state.laps\");\n    console.log(this.state.laps);\n\n    let lapTotal = this.state.lapTotal;\n    lapTotal[position] = newLapTotalForCurrentRunner;\n\n    let allLaps = this.state.laps;\n    let currentRunnerLapList = allLaps[this.state.runners[position]];\n    currentRunnerLapList.push(lapTime);\n    allLaps[this.state.runners[position]] = currentRunnerLapList;\n\n    this.setState({\n      lapTotal: lapTotal,\n      laps: allLaps\n    });\n  };\n\n  updateNextRunnerName = evt => {\n    this.setState({\n      nextRunnerName: evt.target.value\n    });\n  };\n\n  addRunner = () => {\n    if (this.state.nextRunnerName == \"\") {\n      alert(\"Name Cannot be blank\");\n    } else if (this.state.runners.includes(this.state.nextRunnerName)) {\n      alert(\"Name '\" + this.state.nextRunnerName + \"' Already exists\");\n    } else {\n      let newRunners = this.state.runners;\n      newRunners.push(this.state.nextRunnerName);\n\n      console.log(newRunners);\n\n      this.setState({\n        runners: newRunners,\n        nextRunnerName: \"\"\n      });\n    }\n  };\n\n  removeRunner = pos => {\n    if (this.state.runners.length > 1) {\n      let listOfRunners = this.state.runners;\n      listOfRunners.splice(pos, 1);\n      this.setState({\n        runners: listOfRunners\n      });\n    } else {\n      alert(\"removing last runner is not possible\");\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        {this.state.runners.map((runnerName, pos) => {\n          if (this.state.runners[0] === undefined) {\n            return null;\n          } else {\n            return (\n              <Runner\n                key={pos}\n                name={runnerName}\n                position={pos}\n                removeRunner={() => this.removeRunner(pos)}\n              />\n            );\n          }\n        })}\n        {!this.state.runnersSelected ? (\n          <div>\n            <input\n              type=\"text\"\n              value={this.state.nextRunnerName}\n              onChange={evt => this.updateNextRunnerName(evt)}\n            />\n            <button onClick={() => this.addRunner()}>Add Runner</button>\n            <br />\n          </div>\n        ) : null}\n        <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n          <br />\n        </div>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Lap Runners */}\n        {this.state.runnersSelected == true ? (\n          <div style={{ display: \"inline-block\", margin: \"0 auto\" }}>\n            <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n            <div style={{ display: \"flex\" }}>\n              {this.state.runners.map((runner, i) => {\n                return (\n                  <LapRunner\n                    key={i}\n                    name={runner}\n                    pos={i}\n                    laps={this.state.laps[runner]}\n                    addLap={() =>\n                      this.addLap(i, convertToCentiSeconds(Date.now()))\n                    }\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}