{"ast":null,"code":"var _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nexport default class HomePage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      /**\n       * Epoch timestamp of when the timer was started in centiseconds\n       */\n      started: null,\n\n      /**\n       * Total time recorded when stopping the timer in centiseconds\n       */\n      recordedTime: 0,\n\n      /**\n       * Sum of lap times in centiseconds\n       * Setting this value on each lap so it doesn't need to be\n       * calculated when rendering\n       */\n      lapTotal: 0,\n\n      /**\n       * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n       */\n      laps: [] // totalTime: 0,\n      // runnersCount: 1,\n      // runnersName: [\"runner1\"],\n      // currentLapTime: [0][0]\n\n    });\n  }\n\n  // setRunners = numOfRunners => {\n  //   this.setState({ runners: numOfRunners });\n  // };\n  // resetRunners = () => {\n  //   this.setState({ runners: null });\n  // };\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, __jsx(\"strike\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Runner#1\"), __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: \"Alex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))), __jsx(\"button\", {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Add Runner\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      disabled: true,\n      onClick: () => this.startTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Start Timer\"), __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Total Time\"), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })));\n  }\n\n} // export default HomePage;","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","HomePage","React","Component","started","recordedTime","lapTotal","laps","componentDidMount","tick","componentDidUpdate","requestAnimationFrame","bind","state","now","Date","totalTime","setState","currentLapTime","render","textAlign","startTime"],"mappings":";;;;;;AAAA;AACA,SAASA,qBAAT,QAAsC,oBAAtC;AAEA,eAAe,MAAMC,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAAuC;AAAA;AAAA;;AAAA,mCAC5C;AACN;;;AAGAC,MAAAA,OAAO,EAAE,IAJH;;AAMN;;;AAGAC,MAAAA,YAAY,EAAE,CATR;;AAWN;;;;;AAKAC,MAAAA,QAAQ,EAAE,CAhBJ;;AAkBN;;;AAGAC,MAAAA,IAAI,EAAE,EArBA,CAuBN;AACA;AACA;AACA;;AA1BM,KAD4C;AAAA;;AA8BpD;AACA;AACA;AAEA;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,IAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,qBAAqB,CAAC,KAAKF,IAAL,CAAUG,IAAV,CAAe,IAAf,CAAD,CAArB;AACD;;AAEDH,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKI,KAAL,CAAWT,OAAf,EAAwB;AACtB,YAAMU,GAAG,GAAGd,qBAAqB,CAACe,IAAI,CAACD,GAAL,EAAD,CAAjC;AACA,YAAME,SAAS,GAAGF,GAAG,GAAG,KAAKD,KAAL,CAAWT,OAAjB,GAA2B,KAAKS,KAAL,CAAWR,YAAxD;AACA,WAAKY,QAAL,CAAc;AACZH,QAAAA,GADY;AAEZE,QAAAA,SAFY;AAGZE,QAAAA,cAAc,EAAEF,SAAS,GAAG,KAAKH,KAAL,CAAWP;AAH3B,OAAd;AAKD,KARD,MAQO;AACL,UAAI,KAAKO,KAAL,CAAWR,YAAX,KAA4B,KAAKQ,KAAL,CAAWG,SAA3C,EAAsD;AACpD,aAAKC,QAAL,CAAc;AACZD,UAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWR,YADV;AAEZa,UAAAA,cAAc,EAAE,KAAKL,KAAL,CAAWR,YAAX,GAA0B,KAAKQ,KAAL,CAAWP;AAFzC,SAAd;AAID;AACF;AACF;;AAEDa,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,0DADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CAPF,EAcE;AAAQ,MAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,QAAQ,MAAhB;AAAiB,MAAA,OAAO,EAAE,MAAM,KAAKC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAhBF,CADF;AA0BD;;AA5FmD,C,CA+FtD","sourcesContent":["// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\n\nexport default class HomePage extends React.Component {\n  state = {\n    /**\n     * Epoch timestamp of when the timer was started in centiseconds\n     */\n    started: null,\n\n    /**\n     * Total time recorded when stopping the timer in centiseconds\n     */\n    recordedTime: 0,\n\n    /**\n     * Sum of lap times in centiseconds\n     * Setting this value on each lap so it doesn't need to be\n     * calculated when rendering\n     */\n    lapTotal: 0,\n\n    /**\n     * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n     */\n    laps: []\n\n    // totalTime: 0,\n    // runnersCount: 1,\n    // runnersName: [\"runner1\"],\n    // currentLapTime: [0][0]\n  };\n\n  // setRunners = numOfRunners => {\n  //   this.setState({ runners: numOfRunners });\n  // };\n\n  // resetRunners = () => {\n  //   this.setState({ runners: null });\n  // };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n\n        {/* Runners */}\n        <div>\n          <span>Runner#1</span>\n          <span>\n            <input type=\"text\" value=\"Alex\" />\n          </span>\n        </div>\n\n        <button disabled>Add Runner</button>\n\n        <div>\n          <button disabled onClick={() => this.startTime}>\n            Start Timer\n          </button>\n          <h1>Total Time</h1>\n          <h3></h3>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default HomePage;\n"]},"metadata":{},"sourceType":"module"}