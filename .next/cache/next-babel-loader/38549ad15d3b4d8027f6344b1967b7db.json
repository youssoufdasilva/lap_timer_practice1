{"ast":null,"code":"var _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nexport default class HomePage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      /**\n       * Epoch timestamp of when the timer was started in centiseconds\n       */\n      started: null,\n\n      /**\n       * Total time recorded when stopping the timer in centiseconds\n       */\n      recordedTime: 0,\n\n      /**\n       * Sum of lap times in centiseconds\n       * Setting this value on each lap so it doesn't need to be\n       * calculated when rendering\n       */\n      lapTotal: 0,\n\n      /**\n       * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n       */\n      laps: [] // totalTime: 0,\n      // runnersCount: 1,\n      // runnersName: [\"runner1\"],\n      // currentLapTime: [0][0]\n\n    });\n\n    _defineProperty(this, \"startTimer\", time => {\n      this.setState({\n        started: time\n      });\n    });\n\n    _defineProperty(this, \"stopTimer\", time => {\n      // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n      this.setState({\n        recordedTime: this.state.recordedTime + time - this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(this, \"addLap\", time => {\n      //for multi runner we'll identify which runner's lap we're updating\n\n      /*\n      const lapTotal = state.laps.reduce((prev, cur) => prev + cur, 0);\n        const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n        const newLapTotal = lapTotal + lapTime;\n        return {\n          ...state,\n          lapTotal: newLapTotal,\n          laps: [lapTime, ...state.laps],\n        }\n      */\n      const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      this.setState({\n        lapTotal: newLapTotal,\n        laps: [lapTime, ...this.state.laps]\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, __jsx(\"strike\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Runner#1 \"), __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: \"Alex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), __jsx(\"button\", {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Add Runner\"), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, !this.state.started ? __jsx(\"button\", {\n      onClick: () => this.startTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Start Timer\") : __jsx(\"button\", {\n      onClick: () => this.stopTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Pause Timer\"), this.state.recordedTime > 0 ? __jsx(\"button\", {\n      onClick: () => this.resetTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Reset Timer\") : null, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Total Time\"), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), __jsx(Timer, {\n      label: \"Total Time\",\n      time: this.state.totalTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })));\n  }\n\n} // export default HomePage;","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","HomePage","React","Component","started","recordedTime","lapTotal","laps","time","setState","state","reduce","prev","cur","lapTime","action","newLapTotal","componentDidMount","tick","componentDidUpdate","requestAnimationFrame","bind","now","Date","totalTime","currentLapTime","render","textAlign","startTimer","stopTimer","resetTimer"],"mappings":"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","sourcesContent":["// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\n\nexport default class HomePage extends React.Component {\n  state = {\n    /**\n     * Epoch timestamp of when the timer was started in centiseconds\n     */\n    started: null,\n\n    /**\n     * Total time recorded when stopping the timer in centiseconds\n     */\n    recordedTime: 0,\n\n    /**\n     * Sum of lap times in centiseconds\n     * Setting this value on each lap so it doesn't need to be\n     * calculated when rendering\n     */\n    lapTotal: 0,\n\n    /**\n     * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n     */\n    laps: []\n\n    // totalTime: 0,\n    // runnersCount: 1,\n    // runnersName: [\"runner1\"],\n    // currentLapTime: [0][0]\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    this.setState({\n      started: time\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  addLap = time => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    /*\n    const lapTotal = state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      return {\n        ...state,\n        lapTotal: newLapTotal,\n        laps: [lapTime, ...state.laps],\n      }\n    */\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: [lapTime, ...this.state.laps]\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        <div>\n          <span>Runner#1 </span>\n          <span>\n            <input type=\"text\" value=\"Alex\" />\n          </span>\n        </div>\n        <button disabled>Add Runner</button>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n\n          <h1>Total Time</h1>\n          <h3></h3>\n          <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default HomePage;\n"]},"metadata":{},"sourceType":"module"}