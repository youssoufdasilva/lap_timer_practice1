{"ast":null,"code":"var _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [],\n  runnersSelected: false\n};\nexport default class HomePage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [[]],\n      runnersSelected: false,\n      runners: [\"Alex\"],\n      nextRunnerName: \"\"\n    });\n\n    _defineProperty(this, \"startTimer\", time => {\n      this.setState({\n        started: time,\n        runnersSelected: true\n      });\n    });\n\n    _defineProperty(this, \"stopTimer\", time => {\n      // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n      this.setState({\n        recordedTime: this.state.recordedTime + time - this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(this, \"resetTimer\", () => {\n      this.setState(initialState);\n    });\n\n    _defineProperty(this, \"addLap\", time => {\n      //for multi runner we'll identify which runner's lap we're updating\n      const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = time - this.state.started + this.state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      this.setState({\n        lapTotal: newLapTotal,\n        laps: [lapTime, ...this.state.laps]\n      });\n    });\n\n    _defineProperty(this, \"updateNextRunnerName\", evt => {\n      this.setState({\n        nextRunnerName: evt.target.value\n      });\n    });\n\n    _defineProperty(this, \"addRunner\", () => {\n      if (this.state.nextRunnerName == \"\") {\n        alert(\"Name Cannot be blank\");\n      } else {\n        let newRunners = this.state.runners;\n        newRunners.push(this.state.nextRunnerName);\n        this.setState({\n          runners: newRunners,\n          nextRunnerName: \"\"\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeRunner\", pos => {\n      if (this.state.runners.length > 1) {\n        let listOfRunners = this.state.runners;\n        listOfRunners.splice(pos, 1);\n        this.setState({\n          runners: listOfRunners\n        });\n      } else {\n        alert(\"removing last runner is not possible\");\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, __jsx(\"strike\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), this.state.runners.map((runnerName, pos) => {\n      return __jsx(Runner, {\n        name: runnerName,\n        position: pos,\n        removeRunner: () => this.removeRunner(pos),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    }), __jsx(\"input\", {\n      type: \"text\",\n      value: this.state.nextRunnerName,\n      onChange: evt => this.updateNextRunnerName(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: () => this.addRunner(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Add Runner #\", this.state.runners.length + 1), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, !this.state.started ? __jsx(\"button\", {\n      onClick: () => this.startTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Start Timer\") : __jsx(\"button\", {\n      onClick: () => this.stopTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n      onClick: () => this.resetTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Reset Timer\") : null, __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), this.state.runnersSelected == true ? __jsx(\"div\", {\n      style: {\n        display: \"inline-block\",\n        margin: \"0 auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, __jsx(Timer, {\n      label: \"Total Time\",\n      time: this.state.totalTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.state.runners.map((runner, i) => {\n      return __jsx(LapRunner, {\n        name: runner,\n        pos: i,\n        laps: this.state.laps[i],\n        addLap: () => this.addLap(i, convertToCentiSeconds(Date.now())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      });\n    }))) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","Runner","initialState","started","recordedTime","lapTotal","laps","runnersSelected","HomePage","React","Component","runners","nextRunnerName","time","setState","state","reduce","prev","cur","lapTime","newLapTotal","evt","target","value","alert","newRunners","push","pos","length","listOfRunners","splice","componentDidMount","tick","componentDidUpdate","requestAnimationFrame","bind","now","Date","totalTime","currentLapTime","render","textAlign","map","runnerName","removeRunner","updateNextRunnerName","addRunner","startTimer","stopTimer","resetTimer","display","margin","runner","i","addLap"],"mappings":"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","sourcesContent":["import { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [],\n  runnersSelected: false\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [[]],\n    runnersSelected: false,\n\n    runners: [\"Alex\"],\n    nextRunnerName: \"\"\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    this.setState({\n      started: time,\n      runnersSelected: true\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    this.setState(initialState);\n  };\n\n  addLap = time => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: [lapTime, ...this.state.laps]\n    });\n  };\n\n  updateNextRunnerName = evt => {\n    this.setState({\n      nextRunnerName: evt.target.value\n    });\n  };\n\n  addRunner = () => {\n    if (this.state.nextRunnerName == \"\") {\n      alert(\"Name Cannot be blank\");\n    } else {\n      let newRunners = this.state.runners;\n      newRunners.push(this.state.nextRunnerName);\n      this.setState({\n        runners: newRunners,\n        nextRunnerName: \"\"\n      });\n    }\n  };\n\n  removeRunner = pos => {\n    if (this.state.runners.length > 1) {\n      let listOfRunners = this.state.runners;\n      listOfRunners.splice(pos, 1);\n      this.setState({\n        runners: listOfRunners\n      });\n    } else {\n      alert(\"removing last runner is not possible\");\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        {this.state.runners.map((runnerName, pos) => {\n          return (\n            <Runner\n              name={runnerName}\n              position={pos}\n              removeRunner={() => this.removeRunner(pos)}\n            />\n          );\n        })}\n        <input\n          type=\"text\"\n          value={this.state.nextRunnerName}\n          onChange={evt => this.updateNextRunnerName(evt)}\n        />\n        <button onClick={() => this.addRunner()}>\n          Add Runner #{this.state.runners.length + 1}\n        </button>\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n          <br />\n        </div>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Lap Runners */}\n        {this.state.runnersSelected == true ? (\n          <div style={{ display: \"inline-block\", margin: \"0 auto\" }}>\n            <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n            <div style={{ display: \"flex\" }}>\n              {this.state.runners.map((runner, i) => {\n                return (\n                  <LapRunner\n                    name={runner}\n                    pos={i}\n                    laps={this.state.laps[i]}\n                    addLap={() =>\n                      this.addLap(i, convertToCentiSeconds(Date.now()))\n                    }\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}