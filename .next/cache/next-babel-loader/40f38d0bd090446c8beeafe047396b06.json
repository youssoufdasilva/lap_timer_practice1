{"ast":null,"code":"var _jsxFileName = \"/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: []\n};\nexport default class HomePage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      started: null,\n      recordedTime: 0,\n      lapTotal: 0,\n      laps: [],\n      runnerCount: 1,\n      runnerNames: [\"Alex\"] // currentLapTime: [0][0]\n\n    });\n\n    _defineProperty(this, \"startTimer\", time => {\n      this.setState({\n        started: time\n      });\n    });\n\n    _defineProperty(this, \"stopTimer\", time => {\n      // recordedTime: state.recordedTime + action.time - state.started,\n      //     started: null\n      this.setState({\n        recordedTime: this.state.recordedTime + time - this.state.started,\n        started: null\n      });\n    });\n\n    _defineProperty(this, \"resetTimer\", () => {\n      this.setState(initialState);\n    });\n\n    _defineProperty(this, \"addLap\", time => {\n      //for multi runner we'll identify which runner's lap we're updating\n      const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = time - this.state.started + this.state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      this.setState({\n        lapTotal: newLapTotal,\n        laps: [lapTime, ...this.state.laps]\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, __jsx(\"strike\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Multi-Runner\"), \" \\\"Single-Runner\\\" Lap Time Tracker built in Next.js!\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Runner#1 \"), __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: \"Alex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }))), __jsx(\"button\", {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Add Runner\"), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), \" \", __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, !this.state.started ? __jsx(\"button\", {\n      onClick: () => this.startTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Start Timer\") : __jsx(\"button\", {\n      onClick: () => this.stopTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Pause Timer\"), this.state.recordedTime > 0 && this.state.started == null ? __jsx(\"button\", {\n      onClick: () => this.resetTimer(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Reset Timer\") : null, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Total Time\"), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), __jsx(Timer, {\n      label: \"Total Time\",\n      time: this.state.totalTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      style: {\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(LapRunner, {\n      pos: 1,\n      laps: this.state.laps,\n      addLap: () => this.addLap(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), __jsx(LapRunner, {\n      pos: 2,\n      laps: this.state.laps,\n      addLap: () => this.addLap(convertToCentiSeconds(Date.now())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/dcsl_test/dcsl_practice1/pages/index.js"],"names":["convertToCentiSeconds","Timer","LapRunner","initialState","started","recordedTime","lapTotal","laps","HomePage","React","Component","runnerCount","runnerNames","time","setState","state","reduce","prev","cur","lapTime","newLapTotal","componentDidMount","tick","componentDidUpdate","requestAnimationFrame","bind","now","Date","totalTime","currentLapTime","render","textAlign","startTimer","stopTimer","resetTimer","display","addLap"],"mappings":"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","sourcesContent":["// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: 0,\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: []\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [],\n\n    runnerCount: 1,\n    runnerNames: [\"Alex\"]\n    // currentLapTime: [0][0]\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    this.setState({\n      started: time\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    this.setState(initialState);\n  };\n\n  addLap = time => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: [lapTime, ...this.state.laps]\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        <div>\n          <span>Runner#1 </span>\n          <span>\n            <input type=\"text\" value=\"Alex\" />\n          </span>\n        </div>\n        <button disabled>Add Runner</button>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n\n          <h1>Total Time</h1>\n          <h3></h3>\n          <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n        </div>\n        {/*  */}\n        {/* Lap Runners */}\n        <div style={{ display: \"block\" }}>\n          <LapRunner\n            pos={1}\n            laps={this.state.laps}\n            addLap={() => this.addLap(convertToCentiSeconds(Date.now()))}\n          />\n          <LapRunner\n            pos={2}\n            laps={this.state.laps}\n            addLap={() => this.addLap(convertToCentiSeconds(Date.now()))}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}