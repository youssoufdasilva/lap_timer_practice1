{"version":3,"file":"static/webpack/static/development/pages/index.js.2ed35b334a5cf13dab9e.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// import LapRunners from \"../components/LapRunners\";\nimport { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\n\nexport default class HomePage extends React.Component {\n  state = {\n    /**\n     * Epoch timestamp of when the timer was started in centiseconds\n     */\n    started: null,\n\n    /**\n     * Total time recorded when stopping the timer in centiseconds\n     */\n    recordedTime: 0,\n\n    /**\n     * Sum of lap times in centiseconds\n     * Setting this value on each lap so it doesn't need to be\n     * calculated when rendering\n     */\n    lapTotal: 0,\n\n    /**\n     * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n     */\n    laps: []\n\n    // totalTime: 0,\n    // runnersCount: 1,\n    // runnersName: [\"runner1\"],\n    // currentLapTime: [0][0]\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    this.setState({\n      started: time\n    });\n  };\n\n  stopTimer = time => {\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  addLap = time => {\n    //for multi runner we'll identify which runner's lap we're updating\n\n    /*\n    const lapTotal = state.laps.reduce((prev, cur) => prev + cur, 0);\n      const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n      const newLapTotal = lapTotal + lapTime;\n      return {\n        ...state,\n        lapTotal: newLapTotal,\n        laps: [lapTime, ...state.laps],\n      }\n    */\n\n    const lapTotal = this.state.laps.reduce((prev, cur) => prev + cur, 0);\n    const lapTime = action.time - state.started + state.recordedTime - lapTotal;\n    const newLapTotal = lapTotal + lapTime;\n\n    this.setState({\n      lapTotal: newLapTotal,\n      laps: [lapTime, ...this.state.laps]\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        <div>\n          <span>Runner#1 </span>\n          <span>\n            <input type=\"text\" value=\"Alex\" />\n          </span>\n        </div>\n        <button disabled>Add Runner</button>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n\n          <h1>Total Time</h1>\n          <h3></h3>\n          <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default HomePage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;AACA;AA3BA;AACA;AAuDA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAWA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;AAjEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAylJA;AACA;AACA;;;;;A","sourceRoot":""}