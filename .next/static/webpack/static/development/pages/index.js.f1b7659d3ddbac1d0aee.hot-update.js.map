{"version":3,"file":"static/webpack/static/development/pages/index.js.f1b7659d3ddbac1d0aee.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { convertToCentiSeconds } from \"../helpers/helpers\";\nimport Timer from \"../components/Timer\";\nimport LapRunner from \"../components/LapRunner\";\nimport Runner from \"../components/Runner\";\n\nconst initialState = {\n  /**\n   * Epoch timestamp of when the timer was started in centiseconds\n   */\n  started: null,\n\n  /**\n   * Total time recorded when stopping the timer in centiseconds\n   */\n  recordedTime: 0,\n\n  /**\n   * Sum of lap times in centiseconds\n   * Setting this value on each lap so it doesn't need to be\n   * calculated when rendering\n   */\n  lapTotal: [0],\n\n  /**\n   * Array of lap times in centiseconds. New laps are prepended, so the list is in reverse\n   */\n  laps: [[]],\n  runnersSelected: false,\n  runners: [],\n  nextRunnerName: \"Alex\"\n};\n\nexport default class HomePage extends React.Component {\n  state = {\n    started: null,\n    recordedTime: 0,\n    lapTotal: 0,\n    laps: [[]],\n    runnersSelected: false,\n\n    runners: [],\n    nextRunnerName: \"Alex\"\n  };\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  tick() {\n    if (this.state.started) {\n      const now = convertToCentiSeconds(Date.now());\n      const totalTime = now - this.state.started + this.state.recordedTime;\n      this.setState({\n        now,\n        totalTime,\n        currentLapTime: totalTime - this.state.lapTotal\n      });\n    } else {\n      if (this.state.recordedTime !== this.state.totalTime) {\n        this.setState({\n          totalTime: this.state.recordedTime,\n          currentLapTime: this.state.recordedTime - this.state.lapTotal\n        });\n      }\n    }\n  }\n\n  startTimer = time => {\n    console.log(\"=== startTimer ===\");\n\n    if (this.state.runners.length == 0) {\n      console.log(\"default runner added\");\n      this.addRunner();\n    }\n\n    let allLaps = [];\n    let allLapTotals = [];\n\n    this.state.runners.map(runner => {\n      allLaps[runner] = [];\n      allLapTotals[runner] = 0;\n    });\n\n    this.setState({\n      started: time,\n      runnersSelected: true,\n      laps: allLaps,\n      lapTotal: allLapTotals\n    });\n  };\n\n  stopTimer = time => {\n    console.log(\"=== stopTimer ===\");\n    // recordedTime: state.recordedTime + action.time - state.started,\n    //     started: null\n    this.setState({\n      recordedTime: this.state.recordedTime + time - this.state.started,\n      started: null\n    });\n  };\n\n  resetTimer = () => {\n    console.log(\"=== resetTimer ===\");\n    this.setState(initialState);\n  };\n\n  addLap = (position, time) => {\n    console.log(\"=== addLap ===\");\n\n    //for multi runner we'll identify which runner's lap we're updating\n    const myRunner = this.state.runners[position];\n\n    const myRunnersLapTotal = this.state.laps[myRunner].reduce(\n      (prev, cur) => prev + cur,\n      0 // 0 is the initial value\n    );\n\n    const lapTime =\n      time - this.state.started + this.state.recordedTime - myRunnersLapTotal;\n\n    const myRunnersLapTotalUpdated = myRunnersLapTotal + lapTime;\n\n    let lapTotal = this.state.lapTotal;\n    lapTotal[position] = myRunnersLapTotalUpdated;\n\n    let allLaps = this.state.laps;\n    let currentRunnerLapList = allLaps[this.state.runners[position]];\n    currentRunnerLapList.push(lapTime);\n    allLaps[this.state.runners[position]] = currentRunnerLapList;\n\n    this.setState({\n      lapTotal: lapTotal,\n      laps: allLaps\n    });\n\n    ///////////////\n    // let allLaps = [];\n    // let allLapTotals = [];\n\n    // this.state.runners.map(runner => {\n    //   allLaps[runner] = [];\n    //   allLapTotals[runner] = 0;\n    // });\n\n    // this.setState({\n    //   started: time,\n    //   runnersSelected: true,\n    //   laps: allLaps,\n    //   lapTotal: allLapTotals\n    // });\n  };\n\n  updateNextRunnerName = evt => {\n    this.setState({\n      nextRunnerName: evt.target.value\n    });\n  };\n\n  addRunner = () => {\n    if (this.state.nextRunnerName == \"\") {\n      alert(\"Name Cannot be blank\");\n    } else if (this.state.runners.includes(this.state.nextRunnerName)) {\n      alert(\"Name '\" + this.state.nextRunnerName + \"' Already exists\");\n    } else {\n      let newRunners = this.state.runners;\n      newRunners.push(this.state.nextRunnerName);\n\n      console.log(newRunners);\n\n      this.setState({\n        runners: newRunners,\n        nextRunnerName: \"\"\n      });\n    }\n  };\n\n  removeRunner = pos => {\n    if (this.state.runners.length > 1) {\n      let listOfRunners = this.state.runners;\n      listOfRunners.splice(pos, 1);\n      this.setState({\n        runners: listOfRunners\n      });\n    } else {\n      alert(\"removing last runner is not possible\");\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>\n          <strike>Multi-Runner</strike> \"Single-Runner\" Lap Time Tracker built\n          in Next.js!\n        </h1>\n        {/*  */}\n        {/* Runners */}\n        {this.state.runners.map((runnerName, pos) => {\n          if (this.state.runners[0] === undefined) {\n            return null;\n          } else {\n            return (\n              <Runner\n                key={pos}\n                name={runnerName}\n                position={pos}\n                removeRunner={() => this.removeRunner(pos)}\n              />\n            );\n          }\n        })}\n        {!this.state.runnersSelected ? (\n          <div>\n            <input\n              type=\"text\"\n              value={this.state.nextRunnerName}\n              onChange={evt => this.updateNextRunnerName(evt)}\n            />\n            <button onClick={() => this.addRunner()}>Add Runner</button>\n            <br />\n          </div>\n        ) : null}\n        <br />\n        {/*  */}\n        {/* Timer Controlers */}\n        <div>\n          {!this.state.started ? (\n            <button\n              onClick={() => this.startTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Start Timer\n            </button>\n          ) : (\n            <button\n              onClick={() => this.stopTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Pause Timer\n            </button>\n          )}\n\n          {this.state.recordedTime > 0 && this.state.started == null ? (\n            <button\n              onClick={() => this.resetTimer(convertToCentiSeconds(Date.now()))}\n            >\n              Reset Timer\n            </button>\n          ) : null}\n          <br />\n        </div>\n        <br /> <br />\n        <hr />\n        <br /> <br />\n        {/*  */}\n        {/* Lap Runners */}\n        {this.state.runnersSelected == true ? (\n          <div style={{ display: \"inline-block\", margin: \"0 auto\" }}>\n            <Timer label=\"Total Time\" time={this.state.totalTime}></Timer>\n            <div style={{ display: \"flex\" }}>\n              {this.state.runners.map((runner, i) => {\n                return (\n                  <LapRunner\n                    key={i}\n                    name={runner}\n                    pos={i}\n                    laps={this.state.laps[runner]}\n                    addLap={() =>\n                      this.addLap(i, convertToCentiSeconds(Date.now()))\n                    }\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAxBA;AACA;AA0BA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AACA;AAqCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AADA;AACA;AAIA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;;;;;;AAnJA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AA2HA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAMA;;;;AAxPA;AACA;;;;;A","sourceRoot":""}